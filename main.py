import json
import os
import paramiko
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.panel import Panel
from rich import box

console = Console()
CONFIG_FILE = "servers.json"
VERSION = "v0.1.0"

# —è–¥—Ä–æ: –∑–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
def load_servers():
    if not os.path.exists(CONFIG_FILE): return []
    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_servers(servers):
    with open(CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(servers, f, indent=2, ensure_ascii=False)

# –∏–Ω—Ñ–æ: –±–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
def get_server_info(ssh):
    cmds = [
        "hostname", "uptime", "free -h", "df -h /",
        "lscpu | grep 'Model name\\|CPU(s)'",
        "cat /etc/os-release | grep PRETTY_NAME"
    ]
    console.print("\n[bold green]üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:[/bold green]\n")
    for cmd in cmds:
        _, out, _ = ssh.exec_command(cmd)
        console.print(out.read().decode().strip())

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
def setup_server(ssh, os_type):
    run = lambda c: ssh.exec_command(c)
    run("sudo apt update -y")
    run("sudo apt install -y ufw nginx software-properties-common")
    run("sudo ufw allow 22 && sudo ufw allow 9339 && sudo ufw --force enable")
    run("sudo systemctl enable nginx && sudo systemctl start nginx")
    run("sudo add-apt-repository ppa:catrobat/ppa -y 2>/dev/null || true")
    run("sudo apt update && sudo apt install -y catrobat || true")
    console.print("[green]‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")

# –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –∫—Ä–∞—Å–∏–≤–∞—è –ø–∞–Ω–µ–ª—å infovds
def show_infovds(ssh):
    run = lambda c: ssh.exec_command(c)[1].read().decode().strip()
    data = {
        "–ò–º—è": run("hostname"),
        "IP": run("hostname -I | awk '{print $1}'"),
        "–û–°": run("cat /etc/os-release | grep PRETTY_NAME | cut -d '\"' -f2"),
        "–ê–ø—Ç–∞–π–º": run("uptime -p"),
        "–¶–ü–£": f"{run('lscpu | grep \"Model name\" | cut -d \":\" -f2 | xargs')} ({run('nproc')} —è–¥–µ—Ä)",
        "–ü–∞–º—è—Ç—å": f"{run('free -h | grep Mem | awk \"{print $3}\"')} / {run('free -h | grep Mem | awk \"{print $2}\"')}",
        "–î–∏—Å–∫": run("df -h / | tail -1 | awk '{print $2\" / \"$3\" –∑–∞–Ω—è—Ç–æ\"}'"),
        "–ù–∞–≥—Ä—É–∑–∫–∞": run("uptime | awk -F'load average:' '{print $2}'")
    }
    t = Table.grid(padding=(0, 2))
    t.add_column(style="cyan", justify="right")
    t.add_column(style="green")
    for k, v in data.items(): t.add_row(f"üîπ {k}:", v)
    console.print(Panel(t, title=f"[bold yellow]üìä {data['–ò–º—è']}[/bold yellow]", border_style="blue", box=box.ROUNDED))
    console.print("[dim]‚Üí –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...[/dim]\n")

# sftp: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
def upload_item(sftp, local, remote):
    if os.path.isfile(local):
        console.print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞: {local} ‚Üí {remote}")
        sftp.put(local, remote)
    elif os.path.isdir(local):
        try: sftp.mkdir(remote)
        except: pass
        for item in os.listdir(local):
            l = os.path.join(local, item)
            r = f"{remote.rstrip('/')}/{item}"
            upload_item(sftp, l, r)

# sftp: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
def download_item(sftp, remote, local):
    try:
        sftp.stat(remote)
    except:
        console.print(f"[red]‚ùå –£–¥–∞–ª—ë–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {remote}[/red]")
        return
    if '.' in os.path.basename(remote) or '/' not in remote:
        console.print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {remote} ‚Üí {local}")
        sftp.get(remote, local)
    else:
        os.makedirs(local, exist_ok=True)
        for item in sftp.listdir(remote):
            r = f"{remote.rstrip('/')}/{item}"
            l = os.path.join(local, item)
            try:
                sftp.stat(r + "/")
                download_item(sftp, r, l)
            except:
                console.print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {r} ‚Üí {l}")
                sftp.get(r, l)

# –∫–æ–º–∞–Ω–¥–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ file
def handle_file_cmd(ssh, args):
    if len(args) < 3:
        console.print("[red]‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: file <–∏—Å—Ç–æ—á–Ω–∏–∫> <–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ>[/red]")
        return
    src, dst = args[1], args[2]
    try:
        sftp = ssh.open_sftp()
        if src.startswith("./") or os.path.exists(src):
            upload_item(sftp, src, dst)
            console.print("[green]‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/green]")
        else:
            download_item(sftp, src, dst)
            console.print("[green]‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ[/green]")
        sftp.close()
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ SFTP: {e}[/red]")

# —Å–µ—Å—Å–∏—è: –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
def connect_to_server(server):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(server["host"], username=server["user"], password=server["password"], timeout=10)
        _, out, _ = ssh.exec_command("hostname")
        real_host = out.read().decode().strip() or server["host"]
        server["real_hostname"] = real_host

        # –ø–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        _, out, _ = ssh.exec_command("pwd")
        current_dir = out.read().decode().strip()
        # —É–∫–æ—Ä–∞—á–∏–≤–∞–µ–º: /home/user ‚Üí user
        short_dir = current_dir.split("/")[-1] if current_dir != "/" else ""

        console.print(f"[blue]‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {server['name']} ‚Üí {real_host}[/blue]")
        get_server_info(ssh)

        if not server.get("setup_done"):
            if Confirm.ask("[yellow]üîß –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?[/yellow]"):
                setup_server(ssh, server["os"])
                server["setup_done"] = True
                servers = load_servers()
                for s in servers:
                    if s["host"] == server["host"] and s["user"] == server["user"]:
                        s.update(server)
                save_servers(servers)

        console.print("\n[bold cyan]‚Üí –ö–æ–º–∞–Ω–¥—ã: exit, infovds, file <–∏—Å—Ç–æ—á–Ω–∏–∫> <–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ>[/bold cyan]")

        # —Ñ–ª–∞–≥: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ dash-—Å—Ç–∏–ª—å (# –≤–º–µ—Å—Ç–æ $)
        use_dash_prompt = False

        while True:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç: root@hostname/dir #
            prompt_symbol = "#" if use_dash_prompt else "$"
            prompt_display = short_dir if short_dir else "~"
            cmd = Prompt.ask(f"[green]{server['user']}@{real_host}/{prompt_display}[/green] {prompt_symbol} ")

            if cmd.strip() == "exit" or cmd.strip() == "quit":
                break
            elif cmd.strip() == "infovds":
                show_infovds(ssh)
                continue
            elif cmd.strip() == "dash":
                use_dash_prompt = True  # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ # –ø—Ä–æ–º–ø—Ç
                console.print("[dim]‚Üí –ü–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ dash-—Å—Ç–∏–ª—å –ø—Ä–æ–º–ø—Ç–∞[/dim]")
                continue
            elif cmd.startswith("cd "):
                # –≤—ã–ø–æ–ª–Ω—è–µ–º cd –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                _, _, err = ssh.exec_command(cmd)
                error = err.read().decode().strip()
                if error:
                    console.print(f"[red]{error}[/red]")
                else:
                    # –æ–±–Ω–æ–≤–ª—è–µ–º short_dir
                    _, out, _ = ssh.exec_command("pwd")
                    current_dir = out.read().decode().strip()
                    short_dir = current_dir.split("/")[-1] if current_dir != "/" else ""
                continue
            elif cmd.startswith("file "):
                handle_file_cmd(ssh, cmd.split(" ", 2))
                continue

            # –≤—ã–ø–æ–ª–Ω—è–µ–º –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É
            _, out, err = ssh.exec_command(cmd)
            output = out.read().decode()
            error = err.read().decode()
            if output:
                console.print(output)
            if error:
                console.print(f"[red]{error}[/red]")

        ssh.close()
        console.print("[red]üîå –û—Ç–∫–ª—é—á–µ–Ω–æ[/red]")
    except Exception as e:
        console.print(f"[red]‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}[/red]")

# –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
def add_server():
    name = Prompt.ask("–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞")
    host = Prompt.ask("IP")
    user = Prompt.ask("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", default="root")
    pwd = Prompt.ask("–ü–∞—Ä–æ–ª—å", password=True)
    os_choice = Prompt.ask("–û–°", choices=["debian", "ubuntu"], default="ubuntu")
    server = {"name": name, "host": host, "user": user, "password": pwd, "os": os_choice, "setup_done": False}
    servers = load_servers()
    servers.append(server)
    save_servers(servers)
    console.print(f"[green]‚úÖ –°–µ—Ä–≤–µ—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω[/green]")

# –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
def list_servers():
    servers = load_servers()
    if not servers:
        console.print("[yellow]–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤[/yellow]")
        return
    t = Table(title="–°–µ—Ä–≤–µ—Ä—ã")
    for col in ["#", "–ò–º—è", "IP", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–û–°", "–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ?"]: t.add_column(col)
    for i, s in enumerate(servers, 1):
        setup = "‚úÖ" if s.get("setup_done") else "‚ùå"
        t.add_row(str(i), s["name"], s["host"], s["user"], s["os"], setup)
    console.print(t)

# —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    console.print(f"[red]üöÄ SSHSCRE {VERSION} ‚Äî –∑–∞–º–µ–Ω–∞ Termius (–∫–æ–Ω—Å–æ–ª—å)[/red]")
    console.print("[dim]‚Üí –°–æ–∑–¥–∞—Ç–µ–ª—å: KilixKilik | GitHub: @KilixKilik[/dim]\n")  # üëà –î–û–ë–ê–í–ò–õ –°–¢–†–û–ö–£ –°–û–ó–î–ê–¢–ï–õ–Ø
    while True:
        console.print("\n[bold]–ú–µ–Ω—é:[/bold]\n1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\n2. –î–æ–±–∞–≤–∏—Ç—å\n3. –°–ø–∏—Å–æ–∫\n4. –í—ã—Ö–æ–¥")
        choice = Prompt.ask("‚Üí", choices=["1", "2", "3", "4"])
        if choice == "1":
            servers = load_servers()
            if not servers: console.print("[red]–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä[/red]"); continue
            list_servers()
            try:
                idx = int(Prompt.ask("–ù–æ–º–µ—Ä")) - 1
                if 0 <= idx < len(servers): connect_to_server(servers[idx])
                else: console.print("[red]–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä[/red]")
            except: console.print("[red]–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ[/red]")
        elif choice == "2": add_server()
        elif choice == "3": list_servers()
        elif choice == "4": console.print("[red]üëã –ü–æ–∫–∞[/red]"); break

if __name__ == "__main__":
    main_menu()

# Created by KilixKilik | GitHub: @KilixKilik
