import os
import paramiko
import sqlite3
from cryptography.fernet import Fernet
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.panel import Panel
from rich import box

console = Console()
DB_FILE = "servers.db"
HISTORY_FILE = "local_history.txt"
VERSION = "v0.1.2"

# –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
def get_encryption_key():
    key_file = "secret.key"
    if os.path.exists(key_file):
        with open(key_file, "rb") as f: return f.read()
    key = Fernet.generate_key()
    with open(key_file, "wb") as f: f.write(key)
    return key

# —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
def encrypt_password(password):
    key = get_encryption_key()
    return Fernet(key).encrypt(password.encode()).decode()

# –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
def decrypt_password(encrypted):
    key = get_encryption_key()
    return Fernet(key).decrypt(encrypted.encode()).decode()

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS servers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            host TEXT,
            user TEXT,
            password TEXT,
            os TEXT,
            setup_done INTEGER,
            auth_type TEXT,
            key_path TEXT
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS sessions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            server_id INTEGER,
            cwd TEXT,
            FOREIGN KEY(server_id) REFERENCES servers(id)
        )
    ''')
    conn.commit()
    conn.close()

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
def check_db_structure():
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã servers
    c.execute("PRAGMA table_info(servers)")
    columns = [col[1] for col in c.fetchall()]
    desired = ["id", "name", "host", "user", "password", "os", "setup_done", "auth_type", "key_path"]
    if sorted(columns) != sorted(desired):
        conn.close()
        return False
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã sessions
    c.execute("PRAGMA table_info(sessions)")
    columns = [col[1] for col in c.fetchall()]
    desired = ["id", "name", "server_id", "cwd"]
    if sorted(columns) != sorted(desired):
        conn.close()
        return False
    
    conn.close()
    return True

# –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
def load_servers():
    init_db()
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT * FROM servers")
    servers = []
    for row in c.fetchall():
        server = {
            "id": row[0],
            "name": row[1],
            "host": row[2],
            "user": row[3],
            "password": decrypt_password(row[4]) if row[4] else None,
            "os": row[5],
            "setup_done": bool(row[6]),
            "auth_type": row[7],
            "key_path": row[8]
        }
        servers.append(server)
    conn.close()
    return servers

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
def save_servers(servers):
    init_db()
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("DELETE FROM servers")
    for server in servers:
        encrypted_pass = encrypt_password(server["password"]) if server.get("password") else None
        c.execute('''
            INSERT INTO servers (name, host, user, password, os, setup_done, auth_type, key_path)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            server["name"],
            server["host"],
            server["user"],
            encrypted_pass,
            server["os"],
            int(server["setup_done"]),
            server["auth_type"],
            server.get("key_path", "")
        ))
    conn.commit()
    conn.close()

# –∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–π
def load_sessions():
    init_db()
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT sessions.name, servers.id, sessions.cwd FROM sessions JOIN servers ON sessions.server_id = servers.id")
    sessions = {}
    for row in c.fetchall():
        sessions[row[0]] = {"server_id": row[1], "cwd": row[2]}
    conn.close()
    return sessions

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def save_session(name, server, cwd):
    init_db()
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("SELECT id FROM sessions WHERE name = ?", (name,))
    if c.fetchone():
        c.execute("UPDATE sessions SET server_id = ?, cwd = ? WHERE name = ?", (server["id"], cwd, name))
    else:
        c.execute("INSERT INTO sessions (name, server_id, cwd) VALUES (?, ?, ?)", (name, server["id"], cwd))
    conn.commit()
    conn.close()

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
def setup_server(ssh, os_type):
    run = lambda c: ssh.exec_command(c)
    run("sudo apt update -y")
    run("sudo apt install -y ufw nginx software-properties-common git")
    run("sudo ufw allow 22 && sudo ufw allow 9339 && sudo ufw --force enable")
    run("sudo systemctl enable nginx && sudo systemctl start nginx")
    run("sudo add-apt-repository ppa:catrobat/ppa -y 2>/dev/null || true")
    run("sudo apt update && sudo apt install -y catrobat || true")
    run("git clone https://github.com/justflyne/KSD-Brawl-V28 v28")
    console.print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π KSD-Brawl-V28 —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞–ø–∫—É v28", style="green")
    console.print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", style="green")

# –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
def show_infovds(ssh):
    run = lambda c: ssh.exec_command(c)[1].read().decode().strip()
    try:
        cpu_model = run('lscpu | grep "Model name" | cut -d ":" -f2 | xargs') or "N/A"
        cpu_cores = run('nproc') or "N/A"
        mem_used = run('free -h | awk \'/Mem/ {print $3}\'') or "N/A"
        mem_total = run('free -h | awk \'/Mem/ {print $2}\'') or "N/A"
        disk = run('df -h / | tail -1 | awk \'{print $3" / "$2" ("$5")"}\'') or "N/A"
        load = run("uptime | awk -F'load average:' '{print $2}'").strip() or "N/A"
        ip = run("hostname -I | awk '{print $1}'") or "N/A"
        os_name = run('cat /etc/os-release | grep PRETTY_NAME | cut -d \'"\' -f2') or "N/A"
        hostname = run("hostname") or "N/A"
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}", style="red")
        cpu_model = cpu_cores = mem_used = mem_total = disk = load = ip = os_name = hostname = "ERR"
    
    data = {
        "–ò–º—è": hostname,
        "IP": ip,
        "–û–°": os_name,
        "–ê–ø—Ç–∞–π–º": run("uptime -p"),
        "–¶–ü–£": f"{cpu_model} ({cpu_cores} —è–¥–µ—Ä)",
        "–ü–∞–º—è—Ç—å": f"{mem_used} / {mem_total}",
        "–î–∏—Å–∫": disk,
        "–ù–∞–≥—Ä—É–∑–∫–∞": load
    }
    t = Table.grid(padding=(0, 2))
    t.add_column(style="cyan", justify="right")
    t.add_column(style="green")
    for k, v in data.items(): t.add_row(f"üîπ {k}:", v)
    console.print(Panel(t, title="[bold yellow]üìä –°–µ—Ä–≤–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è[/bold yellow]", border_style="blue", box=box.ROUNDED))
    console.print("‚Üí –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É...", style="dim")

# –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
def upload_item(sftp, local, remote):
    if os.path.isfile(local):
        console.print(f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞: {local} ‚Üí {remote}", style="cyan")
        try: sftp.put(local, remote)
        except Exception as e: console.print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", style="red")
    elif os.path.isdir(local):
        try: sftp.mkdir(remote)
        except: pass
        for item in os.listdir(local):
            l = os.path.join(local, item)
            r = f"{remote.rstrip('/')}/{item}"
            upload_item(sftp, l, r)

# —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
def download_item(sftp, remote, local):
    try: attrs = sftp.stat(remote)
    except Exception as e: 
        console.print(f"‚ùå –£–¥–∞–ª—ë–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {remote} ({e})", style="red")
        return
    
    if not attrs.st_mode & 0o040000:
        os.makedirs(os.path.dirname(local), exist_ok=True)
        console.print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {remote} ‚Üí {local}", style="cyan")
        try: sftp.get(remote, local)
        except Exception as e: console.print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}", style="red")
    else:
        os.makedirs(local, exist_ok=True)
        for item in sftp.listdir(remote):
            r = f"{remote.rstrip('/')}/{item}"
            l = os.path.join(local, item)
            try:
                sftp.stat(r + "/")
                download_item(sftp, r, l)
            except:
                os.makedirs(os.path.dirname(l), exist_ok=True)
                console.print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {r} ‚Üí {l}", style="cyan")
                try: sftp.get(r, l)
                except Exception as e: console.print(f"‚ùå –û—à–∏–±–∫–∞: {e}", style="red")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã file
def handle_file_cmd(ssh, src, dst):
    try:
        sftp = ssh.open_sftp()
        if os.path.exists(src):
            upload_item(sftp, src, dst)
            console.print("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", style="green")
        else:
            download_item(sftp, src, dst)
            console.print("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", style="green")
        sftp.close()
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ SFTP: {e}", style="red")

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
def connect_to_server(server):
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        if server["auth_type"] == "password":
            ssh.connect(server["host"], username=server["user"], password=server["password"], timeout=10)
        elif server["auth_type"] == "key":
            ssh.connect(server["host"], username=server["user"], key_filename=server["key_path"], timeout=10)
        
        _, out, _ = ssh.exec_command("hostname")
        real_host = out.read().decode().strip() or server["host"]
        server["real_hostname"] = real_host

        _, out, _ = ssh.exec_command("pwd")
        current_dir = out.read().decode().strip() or "/"
        
        last_cwd = current_dir
        if "session_cwd" in server:
            full_cmd = f"cd {server['session_cwd']} && pwd"
            _, out, err = ssh.exec_command(full_cmd)
            output = out.read().decode().strip()
            error = err.read().decode().strip()
            if error: console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ {server['session_cwd']}: {error}", style="red")
            else: last_cwd = output
            del server["session_cwd"]
        
        short_dir = last_cwd.split("/")[-1] if last_cwd != "/" else "~"
        console.print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {server['name']} ‚Üí {real_host}", style="blue")
        show_infovds(ssh)
        
        if not server.get("setup_done"):
            if Confirm.ask("üîß –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?"):
                setup_server(ssh, server["os"])
                server["setup_done"] = True
                servers = load_servers()
                for s in servers:
                    if s["id"] == server["id"]:
                        s.update(server)
                save_servers(servers)
        
        console.print("\n‚Üí –ö–æ–º–∞–Ω–¥—ã: exit, infovds, file, clear, cls, cd, local ls, local history, dash, undash", style="bold cyan")
        
        use_dash_prompt = False
        while True:
            prompt_symbol = "#" if use_dash_prompt else "$"
            prompt_display = last_cwd.split("/")[-1] if last_cwd != "/" else "~"
            cmd = Prompt.ask(f"{server['user']}@{real_host}/{prompt_display} {prompt_symbol} ", style="green").strip()
            
            if cmd and cmd != "local history":
                with open(HISTORY_FILE, "a") as f: f.write(cmd + "\n")
            
            if not cmd: continue
            elif cmd in ("exit", "quit", "q"): break
            elif cmd == "infovds": show_infovds(ssh)
            elif cmd == "dash": 
                use_dash_prompt = True
                console.print("‚Üí –ü–µ—Ä–µ–∫–ª—é—á—ë–Ω –Ω–∞ dash-—Å—Ç–∏–ª—å –ø—Ä–æ–º–ø—Ç–∞", style="dim")
            elif cmd == "undash": 
                use_dash_prompt = False
                console.print("‚Üí –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", style="dim")
            elif cmd == "clear" or cmd == "cls": os.system('cls' if os.name == 'nt' else 'clear')
            elif cmd.startswith("cd "):
                target = cmd[3:].strip()
                if not target: full_cmd = "cd && pwd"
                else: full_cmd = f"cd {target} && pwd"
                _, out, err = ssh.exec_command(full_cmd)
                output = out.read().decode().strip()
                error = err.read().decode().strip()
                if error: console.print(error, style="red")
                else: last_cwd = output
            elif cmd.startswith("file "):
                parts = cmd.split(maxsplit=2)
                if len(parts) < 3: console.print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: file <–∏—Å—Ç–æ—á–Ω–∏–∫> <–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ>", style="red")
                else: handle_file_cmd(ssh, parts[1], parts[2])
            elif cmd.startswith("local ls"):
                path = cmd[8:].strip() or "."
                try: 
                    for item in os.listdir(path): console.print(f"  {item}")
                except Exception as e: console.print(f"‚ùå local ls: {e}", style="red")
            elif cmd == "local history":
                if os.path.exists(HISTORY_FILE):
                    with open(HISTORY_FILE, "r") as f: history = f.read().splitlines()
                    if history:
                        for i, line in enumerate(history, 1): console.print(f"{i}. {line}")
                    else: console.print("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞", style="yellow")
                else: console.print("–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞", style="yellow")
            else:
                full_cmd = f"cd {last_cwd} 2>/dev/null && {cmd}"
                _, out, err = ssh.exec_command(full_cmd)
                output = out.read().decode()
                error = err.read().decode()
                if output: console.print(output)
                if error: console.print(error, style="red")
        
        ssh.close()
        console.print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ", style="red")
        
        if Confirm.ask("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é?"):
            sess_name = Prompt.ask("üìÅ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
            save_session(sess_name, server, last_cwd)
            console.print(f"‚úÖ –°–µ—Å—Å–∏—è '{sess_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", style="green")
    
    except Exception as e:
        console.print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}", style="red")

# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
def add_server():
    name = Prompt.ask("–ò–º—è —Å–µ—Ä–≤–µ—Ä–∞")
    host = Prompt.ask("IP")
    user = Prompt.ask("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", default="root")
    auth_type = Prompt.ask("–¢–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", choices=["password", "key"], default="password")
    os_choice = Prompt.ask("–û–°", choices=["debian", "ubuntu"], default="ubuntu")
    
    if auth_type == "password":
        pwd = Prompt.ask("–ü–∞—Ä–æ–ª—å", password=True)
        key_path = None
    else:
        pwd = None
        key_path = Prompt.ask("–ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É")
    
    server = {
        "name": name,
        "host": host,
        "user": user,
        "password": pwd,
        "os": os_choice,
        "setup_done": False,
        "auth_type": auth_type,
        "key_path": key_path
    }
    
    servers = load_servers()
    servers.append(server)
    save_servers(servers)
    console.print(f"‚úÖ –°–µ—Ä–≤–µ—Ä {name} –¥–æ–±–∞–≤–ª–µ–Ω", style="green")

# —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
def list_servers():
    servers = load_servers()
    if not servers:
        console.print("–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤", style="yellow")
        return
    t = Table(title="–°–µ—Ä–≤–µ—Ä—ã")
    for col in ["#", "–ò–º—è", "IP", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–û–°", "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", "–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ?"]: 
        t.add_column(col)
    for i, s in enumerate(servers, 1):
        auth_type = "üîë –ö–ª—é—á" if s["auth_type"] == "key" else "üîë –ü–∞—Ä–æ–ª—å"
        setup = "‚úÖ" if s.get("setup_done") else "‚ùå"
        t.add_row(str(i), s["name"], s["host"], s["user"], s["os"], auth_type, setup)
    console.print(t)

# –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
def restore_session():
    sessions = load_sessions()
    if not sessions:
        console.print("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π", style="yellow")
        return None
    t = Table(title="–°–µ—Å—Å–∏–∏")
    t.add_column("#"); t.add_column("–ò–º—è"); t.add_column("–°–µ—Ä–≤–µ—Ä"); t.add_column("–ü—É—Ç—å")
    servers = load_servers()
    for i, (name, data) in enumerate(sessions.items(), 1):
        server = next((s for s in servers if s["id"] == data["server_id"]), None)
        if server:
            t.add_row(str(i), name, f"{server['user']}@{server['host']}", data["cwd"])
        else:
            t.add_row(str(i), name, "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", data["cwd"])
    console.print(t)
    try:
        idx = int(Prompt.ask("–ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏")) - 1
        session_names = list(sessions.keys())
        if idx < 0 or idx >= len(session_names):
            console.print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä", style="red")
            return None
        name = session_names[idx]
        data = sessions[name]
        server = next((s for s in servers if s["id"] == data["server_id"]), None)
        if not server:
            console.print("–°–µ—Ä–≤–µ—Ä –¥–ª—è —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", style="red")
            return None
        server["session_cwd"] = data["cwd"]
        return server
    except Exception as e:
        console.print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏: {e}", style="red")
        return None

# –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    console.print(f"üöÄ SSHSCRE {VERSION} ‚Äî –∑–∞–º–µ–Ω–∞ Termius (–∫–æ–Ω—Å–æ–ª—å)", style="red")
    console.print("‚Üí –°–æ–∑–¥–∞—Ç–µ–ª—å: KilixKilik | GitHub: @KilixKilik", style="dim")
    
    while True:
        console.print("\n–ú–µ–Ω—é:\n1. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\n2. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é\n3. –î–æ–±–∞–≤–∏—Ç—å\n4. –°–ø–∏—Å–æ–∫\n5. –í—ã—Ö–æ–¥", style="bold")
        choice = Prompt.ask("‚Üí", choices=["1", "2", "3", "4", "5"])
        if choice == "1":
            servers = load_servers()
            if not servers: 
                console.print("–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä", style="red")
                continue
            list_servers()
            try:
                idx = int(Prompt.ask("–ù–æ–º–µ—Ä")) - 1
                if 0 <= idx < len(servers): connect_to_server(servers[idx])
                else: console.print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä", style="red")
            except: console.print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", style="red")
        elif choice == "2":
            server = restore_session()
            if server: connect_to_server(server)
        elif choice == "3": add_server()
        elif choice == "4": list_servers()
        elif choice == "5": 
            console.print("üëã –ü–æ–∫–∞", style="red")
            break

if __name__ == "__main__":
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î
    if not os.path.exists(DB_FILE):
        init_db()
        console.print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞", style="green")
    else:
        if not check_db_structure():
            console.print("‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–π. –ó–∞–ø—É—Å—Ç–∏—Ç–µ UpdateSQL.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", style="yellow")
            console.print("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", style="red")
            exit(1)
    
    main_menu()

# Github: @KilikKilix
