import sys
import os
import time
import traceback
from datetime import datetime

LOG_FILE = "debug.log"

def log(msg, tag="DEBUG"):
    now = datetime.now().strftime("%H:%M:%S")
    line = f"[{now}] [{tag}] {msg}"
    print(f"\033[90m{line}\033[0m") 
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

_original_print = print
def debug_print(*args, **kwargs):
    _original_print(*args, **kwargs)
    msg = " ".join(str(arg) for arg in args)
    log(msg, "PRINT")

print = debug_print

def handle_exception(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    log("".join(traceback.format_exception(exc_type, exc_value, exc_traceback)), "CRASH")

sys.excepthook = handle_exception

def inject_sysinfo():
    import platform
    import socket
    info = f"""
    üñ•Ô∏è  –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:
    OS: {platform.system()} {platform.release()}
    Host: {socket.gethostname()}
    Python: {platform.python_version()}
    """
    print(f"\033[94m{info}\033[0m")

if __name__ == "__main__":
    VERSION = "v0.1.2"
    log(f"=== –ó–ê–ü–£–°–ö SSHSCRE {VERSION} –í –†–ï–ñ–ò–ú–ï –û–¢–õ–ê–î–ö–ò ===", "BOOT")
    log(f"Python {sys.version}", "ENV")
    log(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}", "ENV")

    if not os.path.exists("sshscree.py"):
        log("‚ùå –û–®–ò–ë–ö–ê: —Ñ–∞–π–ª sshscree.py –Ω–µ –Ω–∞–π–¥–µ–Ω", "CRASH")
        sys.exit(1)
    
    try:
        from rich.prompt import Prompt
        _original_ask = Prompt.ask
        def debug_ask(*args, **kwargs):
            result = _original_ask(*args, **kwargs)
            log(f"–í–≤–æ–¥: {result}", "INPUT")
            return result
        Prompt.ask = debug_ask

        start_time = time.time()
        log("–ó–∞–ø—É—Å–∫ SSHscre...", "BOOT")

        import sshscree
        if hasattr(sshscree, 'main_menu'):
            inject_sysinfo()
            log("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω", "BOOT")
            if os.path.exists("servers.db"):
                import sqlite3
                conn = sqlite3.connect("servers.db")
                c = conn.cursor()
                c.execute("PRAGMA table_info(servers)")
                servers_cols = [col[1] for col in c.fetchall()]
                c.execute("PRAGMA table_info(sessions)")
                sessions_cols = [col[1] for col in c.fetchall()]
                conn.close()
                
                log(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î servers: {', '.join(servers_cols)}", "DB")
                log(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î sessions: {', '.join(sessions_cols)}", "DB")
                if os.path.exists("UpdateSQL.py"):
                    log("‚úÖ UpdateSQL.py –Ω–∞–π–¥–µ–Ω", "DB")
                else:
                    log("‚ö†Ô∏è UpdateSQL.py –Ω–µ –Ω–∞–π–¥–µ–Ω", "DB")
            else:
                log("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö servers.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "DB")
            
            sshscree.main_menu()
        else:
            log("‚ùå main_menu –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ sshscree.py", "CRASH")
            sys.exit(1)

        duration = time.time() - start_time
        log(f"–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–±–æ—Ç–∞–ª {duration:.2f} —Å–µ–∫.", "EXIT")

    except Exception as e:
        log(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", "CRASH")
        traceback.print_exc()
        print(f"\033[91m[DEBUG] –ö–†–ò–¢: {e}\033[0m")

    log("=== –°–ï–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê ===", "EXIT")
